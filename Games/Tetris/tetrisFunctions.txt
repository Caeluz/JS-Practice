
Implemented:
1. Ghost Piece: Show a translucent outline of where the current piece will land. This helps players visualize the final position before committing to a move.
2. Level Progression: Increase the difficulty as the player advances through levels. This can be achieved by gradually increasing the speed of falling blocks or introducing more challenging block patterns.
3. Next Block Preview: Display a preview of the next block that will appear on the game board. This can help players plan their moves in advance.
4. Sound Effects: Add sound effects for actions such as rotating blocks, clearing lines, and game over. This can make the game more engaging and immersive.

Testing:
1. High Score Leaderboard: Keep track of the highest scores achieved by players and display them on a leaderboard. This encourages replayability and competition among players.

Not Implemented:
1. Hold Block: Allow players to hold a block and use it later. This can provide strategic options and add another layer of complexity to the gameplay.
2. Power-ups: Introduce power-ups that provide temporary benefits to the player, such as clearing multiple lines at once or slowing down the falling speed.
3. Multiplayer Mode: Implement a multiplayer mode where players can compete against each other in real-time or take turns. This can add a competitive aspect and allow players to challenge their friends.
4. Different Block Sets or Themes: Customize the appearance of the blocks or the overall visual theme of the game to give it a unique look and feel.
5. Mobile Optimization: Adapt the game to be playable on mobile devices with touch controls. This can expand the potential audience and make the game accessible to more players.

Bot:
Do you want the Tetris bot to automatically play the game and make optimal moves, or do you want it to assist a human player by suggesting moves?
what is the desired strategy or algorithm it should follow? 
Should it prioritize clearing lines, maximizing score, or surviving as long as possible?

Possible Moves: You should be able to generate a list of all possible moves that the bot can make in the current game state.
This typically involves trying out different rotations and translations of the falling Tetrimino and checking if they are 
valid (i.e., they do not result in collisions with existing blocks or the walls).

Evaluation Function: You need to define an evaluation function that assigns a score or 
fitness value to each possible move. The evaluation function should take into account various factors, 
such as the number of lines cleared, the height of the stack of blocks, the number of holes 
(empty spaces covered by blocks), and any other criteria you want the bot to optimize for.